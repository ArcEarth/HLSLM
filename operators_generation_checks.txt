
?cast_4@@YIXAAU?$vector@M$03$0A@@hlsl@@ABU12@@Z PROC	; cast_4, COMDAT
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
?cast_4@@YIXAAU?$vector@M$03$0A@@hlsl@@ABU12@@Z ENDP	; cast_4


?cast_4a@@YIXAAU?$vector@M$03$00@hlsl@@ABU12@@Z PROC	; cast_4a, COMDAT
	movaps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR [ecx], xmm0
	ret	0
?cast_4a@@YIXAAU?$vector@M$03$00@hlsl@@ABU12@@Z ENDP	; cast_4a


_n$ = 8							; size = 4
?cast_4_loop@@YIXPAU?$vector@M$03$0A@@hlsl@@PBU12@I@Z PROC ; cast_4_loop, COMDAT
	mov	eax, DWORD PTR _n$[esp-4]
	test	eax, eax
	je	SHORT $LN24@cast_4_loo
	sub	ecx, edx
	npad	6
$LL2@cast_4_loo:
	movups	xmm0, XMMWORD PTR [edx]
	lea	edx, DWORD PTR [edx+16]
	movups	XMMWORD PTR [ecx+edx-16], xmm0
	dec	eax
	jne	SHORT $LL2@cast_4_loo
$LN24@cast_4_loo:
	ret	4
?cast_4_loop@@YIXPAU?$vector@M$03$0A@@hlsl@@PBU12@I@Z ENDP ; cast_4_loop


_n$ = 8							; size = 4
?cast_4a_loop@@YIXPAU?$vector@M$03$00@hlsl@@PBU12@I@Z PROC ; cast_4a_loop, COMDAT
	mov	eax, DWORD PTR _n$[esp-4]
	test	eax, eax
	je	SHORT $LN24@cast_4a_lo
	sub	ecx, edx
	npad	6
$LL2@cast_4a_lo:
	movaps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR [ecx+edx], xmm0
	lea	edx, DWORD PTR [edx+16]
	dec	eax
	jne	SHORT $LL2@cast_4a_lo
$LN24@cast_4a_lo:
	ret	4
?cast_4a_loop@@YIXPAU?$vector@M$03$00@hlsl@@PBU12@I@Z ENDP ; cast_4a_loop


_result$ = 8						; size = 4
?cast_4a_loop_iterators@@YIXPBU?$vector@M$03$00@hlsl@@0PAU12@@Z PROC ; cast_4a_loop_iterators, COMDAT
	cmp	ecx, edx
	je	SHORT $LN1@cast_4a_lo
	mov	eax, DWORD PTR _result$[esp-4]
	sub	eax, ecx
	npad	6
$LL2@cast_4a_lo:
	movaps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR [eax+ecx], xmm0
	add	ecx, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL2@cast_4a_lo
$LN1@cast_4a_lo:
	ret	4
?cast_4a_loop_iterators@@YIXPBU?$vector@M$03$00@hlsl@@0PAU12@@Z ENDP ; cast_4a_loop_iterators


?cast_array@@YIXAAY03MABU?$vector@M$03$00@hlsl@@@Z PROC	; cast_array, COMDAT
	movaps	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
?cast_array@@YIXAAY03MABU?$vector@M$03$00@hlsl@@@Z ENDP	; cast_array


?cast_std_array@@YIXAAV?$array@M$03@std@@ABU?$vector@M$03$00@hlsl@@@Z PROC ; cast_std_array, COMDAT
	movaps	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
?cast_std_array@@YIXAAV?$array@M$03@std@@ABU?$vector@M$03$00@hlsl@@@Z ENDP ; cast_std_array


?cast_xmfloat4a@@YIXAAUXMFLOAT4A@DirectX@@ABU?$vector@M$03$00@hlsl@@@Z PROC ; cast_xmfloat4a, COMDAT
	movaps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR [ecx], xmm0
	ret	0
?cast_xmfloat4a@@YIXAAUXMFLOAT4A@DirectX@@ABU?$vector@M$03$00@hlsl@@@Z ENDP ; cast_xmfloat4a


?add3a_member@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC ; add3a_member, COMDAT
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	ret	0
?add3a_member@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP ; add3a_member


?add3_self_operator@@YIXAAU?$vector@M$02$0A@@hlsl@@ABU12@@Z PROC ; add3_self_operator, COMDAT
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	ret	0
?add3_self_operator@@YIXAAU?$vector@M$02$0A@@hlsl@@ABU12@@Z ENDP ; add3_self_operator


?add3a_self_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC ; add3a_self_operator, COMDAT
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	ret	0
?add3a_self_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP ; add3a_self_operator


?add3_operator@@YIXAAU?$vector@M$02$0A@@hlsl@@ABU12@@Z PROC ; add3_operator, COMDAT
	movss	xmm2, DWORD PTR [edx]
	movss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR [ecx]
	unpcklps xmm2, xmm0
	movss	xmm0, DWORD PTR [edx+8]
	movlhps	xmm2, xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	movlhps	xmm1, xmm0
	addps	xmm2, xmm1
	movaps	xmm0, xmm2
	movss	DWORD PTR [ecx], xmm2
	shufps	xmm0, xmm2, 85				; 00000055H
	shufps	xmm2, xmm2, 170				; 000000aaH
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm2
	ret	0
?add3_operator@@YIXAAU?$vector@M$02$0A@@hlsl@@ABU12@@Z ENDP ; add3_operator


?add3a_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC ; add3a_operator, COMDAT
	movaps	xmm2, XMMWORD PTR [ecx]
	movaps	xmm0, XMMWORD PTR [edx]
	andps	xmm2, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
	andps	xmm0, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
	addps	xmm2, xmm0
	movq	QWORD PTR [ecx], xmm2
	shufps	xmm2, xmm2, 170				; 000000aaH
	movss	DWORD PTR [ecx+8], xmm2
	ret	0
?add3a_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP ; add3a_operator


?add4_self_operator@@YIXAAU?$vector@M$03$0A@@hlsl@@ABU12@@Z PROC ; add4_self_operator, COMDAT
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR [edx+12]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [ecx+12], xmm0
	ret	0
?add4_self_operator@@YIXAAU?$vector@M$03$0A@@hlsl@@ABU12@@Z ENDP ; add4_self_operator


?add4_operator@@YIXAAU?$vector@M$03$0A@@hlsl@@ABU12@@Z PROC ; add4_operator, COMDAT
	movups	xmm1, XMMWORD PTR [ecx]
	movups	xmm0, XMMWORD PTR [edx]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	ret	0
?add4_operator@@YIXAAU?$vector@M$03$0A@@hlsl@@ABU12@@Z ENDP ; add4_operator


?add4a_self_operator@@YIXAAU?$vector@M$03$00@hlsl@@ABU12@@Z PROC ; add4a_self_operator, COMDAT
	movaps	xmm1, XMMWORD PTR [ecx]
	addps	xmm1, XMMWORD PTR [edx]
	movaps	XMMWORD PTR [ecx], xmm1
	ret	0
?add4a_self_operator@@YIXAAU?$vector@M$03$00@hlsl@@ABU12@@Z ENDP ; add4a_self_operator


?add4a_operator@@YIXAAU?$vector@M$03$00@hlsl@@ABU12@@Z PROC ; add4a_operator, COMDAT
	movaps	xmm1, XMMWORD PTR [ecx]
	addps	xmm1, XMMWORD PTR [edx]
	movaps	XMMWORD PTR [ecx], xmm1
	ret	0
?add4a_operator@@YIXAAU?$vector@M$03$00@hlsl@@ABU12@@Z ENDP ; add4a_operator


?mul3a_self_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC ; mul3a_self_operator, COMDAT
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	ret	0
?mul3a_self_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP ; mul3a_self_operator


?mul3a_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC ; mul3a_operator, COMDAT
	movaps	xmm2, XMMWORD PTR [ecx]
	movaps	xmm0, XMMWORD PTR [edx]
	andps	xmm2, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
	andps	xmm0, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
	mulps	xmm2, xmm0
	movq	QWORD PTR [ecx], xmm2
	shufps	xmm2, xmm2, 170				; 000000aaH
	movss	DWORD PTR [ecx+8], xmm2
	ret	0
?mul3a_operator@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP ; mul3a_operator


?add3a_foreach@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC ; add3a_foreach, COMDAT
	lea	eax, DWORD PTR [ecx+12]
	cmp	ecx, eax
	je	SHORT $LN1@add3a_fore
	sub	edx, ecx
	npad	7
$LL3@add3a_fore:
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR [ecx]
	add	ecx, 4
	movss	DWORD PTR [ecx-4], xmm0
	cmp	ecx, eax
	jne	SHORT $LL3@add3a_fore
$LN1@add3a_fore:
	ret	0
?add3a_foreach@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP ; add3a_foreach


?add3a_loop@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z PROC	; add3a_loop, COMDAT
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	ret	0
?add3a_loop@@YIXAAU?$vector@M$02$00@hlsl@@ABU12@@Z ENDP	; add3a_loop


?less_member@@YI_NABU?$vector@M$02$00@hlsl@@0@Z PROC	; less_member, COMDAT
	movss	xmm0, DWORD PTR [edx]
	movss	xmm1, DWORD PTR __real@34000000
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN3@less_membe
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [ecx+4]
	jbe	SHORT $LN3@less_membe
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [ecx+8]
	jbe	SHORT $LN3@less_membe
	mov	al, 1
	ret	0
$LN3@less_membe:
	xor	al, al
	ret	0
?less_member@@YI_NABU?$vector@M$02$00@hlsl@@0@Z ENDP	; less_member


?less_operator@@YI_NABU?$vector@M$02$00@hlsl@@0@Z PROC	; less_operator, COMDAT
	movaps	xmm2, XMMWORD PTR [edx]
	andps	xmm2, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
	subps	xmm2, XMMWORD PTR ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
	movaps	xmm0, XMMWORD PTR [ecx]
	andps	xmm0, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
	xor	eax, eax
	cmpltps	xmm0, xmm2
	movmskps ecx, xmm0
	and	ecx, 7
	cmp	cl, 7
	sete	al
	ret	0
?less_operator@@YI_NABU?$vector@M$02$00@hlsl@@0@Z ENDP	; less_operator


?less_NR@@YI_NABU?$vector@M$02$00@hlsl@@0@Z PROC	; less_NR, COMDAT
	push	esi
	mov	esi, edx
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [esi+8]
	seta	al
	comiss	xmm0, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [esi+4]
	seta	dl
	comiss	xmm0, DWORD PTR [ecx+4]
	pop	esi
	seta	cl
	and	dl, cl
	and	al, dl
	ret	0
?less_NR@@YI_NABU?$vector@M$02$00@hlsl@@0@Z ENDP	; less_NR


?less_NR_2@@YI_NABU?$vector@M$02$00@hlsl@@0@Z PROC	; less_NR_2, COMDAT
	movss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [edx+4]
	seta	al
	comiss	xmm0, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx]
	push	ebx
	seta	bl
	and	al, bl
	comiss	xmm0, DWORD PTR [ecx]
	pop	ebx
	seta	cl
	and	al, cl
	and	al, 1
	ret	0
?less_NR_2@@YI_NABU?$vector@M$02$00@hlsl@@0@Z ENDP	; less_NR_2

